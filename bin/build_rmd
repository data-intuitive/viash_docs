#!/usr/bin/env bash

#########################
#    build_rmd 0.0.1    #
#########################

# This wrapper script is auto-generated by viash 0.4.1-rc1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM docker:dind

RUN apk add --no-cache openjdk8-jre

RUN wget https://github.com/data-intuitive/viash/releases/download/0.4.0/viash && chmod +x viash && mv viash /usr/local/bin
RUN apk add --update-cache --repository http://nl.alpinelinux.org/alpine/v3.11/main autoconf=2.69-r2 automake=1.16.1-r0
RUN echo "@testing http://nl.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
RUN apk add --no-cache cmark@testing pandoc@testing
RUN apk add --no-cache bash R R-dev libcurl g++ gcc linux-headers gfortran automake libtool m4 autoconf linux-headers openssl R R-dev wget R-doc libxml2 libxml2-dev libc-dev

ENV CRAN="https://cran.rstudio.com"
ENV R_HOME="/usr/lib/R"
RUN echo "options(repos = c(CRAN = '${CRAN}'))" >> ${R_HOME}/etc/Rprofile.site
RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
  Rscript -e 'remotes::install_cran(c("blogdown", "rmarkdown", "tidyverse"), repos = "https://cran.rstudio.com")' && \
  Rscript -e 'remotes::install_github(c("tidyverse/readxl"), repos = "https://cran.rstudio.com")'

RUN Rscript -e 'if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")' && \
  Rscript -e 'remotes::install_cran(c("tidyverse"), repos = "https://cran.rstudio.com")'

RUN apk add --no-cache python3

RUN ln -sf python3 /usr/bin/python
RUN apk add --no-cache curl

VIASHDOCKER
}
# ViashDockerBuild: ...
function ViashDockerBuild {

  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-build_rmd-XXXXXX")
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $tmpdir/Dockerfile
  cp -r $VIASH_RESOURCES_DIR/* $tmpdir

  # Build the container
  echo "> docker build -t $@ $tmpdir"
  set +e
  docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
  out=$?
  set -e
  if [ ! $out -eq 0 ]; then
    echo "> ERROR: Something went wrong building the container $@"
    echo "> Error transcript follows:"
    cat $tmpdir/docker_build.log
    echo "> --- end of error transcript"
  fi
  if [ "$VIASH_EXEC_MODE" == "setup" ]; then
    exit $out
  fi
}

# ViashSetup: ...
function ViashSetup {
  ViashDockerSetup build_rmd:0.0.1 $VIASH_DOCKER_SETUP_STRATEGY
}

# ViashPush: ...
function ViashPush {
  ViashDockerPush build_rmd:0.0.1 $VIASH_DOCKER_PUSH_STRATEGY
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Build the viash docs Rmds to mds"
   echo
   echo "Options:"
    echo "    file"
    echo "        type: file, default: ."
    echo "        The root of the viash_docs folder."
    echo ""
}
######## Helper functions for setting up Docker images for viash ########


# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  echo "> docker pull $1"
  docker pull $1 && return 0 || return 1
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  set +e
  ViashDockerPull $1
  out=$?
  set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" ]; then
    ViashDockerBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    echo "Skipping setup."
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    ViashDockerLocalTagCheck $VSHD_ID
    if [ $? -eq 0 ]; then
      echo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      echo "Unrecognised Docker strategy: $VSHD_STRAT"
    fi
  else
    echo "Unrecognised Docker strategy: $VSHD_STRAT"
  fi
}

# ViashDockerPush: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerPushStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent alwaysbuild
function ViashDockerPush {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwayspush" -o "$VSHD_STRAT" == "force" ]; then
    set +e
    docker push $1
    outPush=$?
    set -e
    if [ $outPush -eq 0 ]; then
      echo "> $VSHD_ID force push ... ok"
    else
      echo "> $VSHD_ID force push ... error"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "pushifnotpresent" ]; then
    set +e
    ViashDockerRemoteTagCheck $1
    outCheck=$?
    set -e
    if [ $outCheck -eq 0 ]; then
      echo "> $VSHD_ID exists, doing nothing"
    else
      echo -n "> $VSHD_ID does not exist, try pushing "
      set +e
      docker push $1 > /dev/null 2> /dev/null
      outPush=$?
      set -e
      if [ $outPush -eq 0 ]; then
        echo "... ok"
      else
        echo "... error"
      fi
    fi
  else
    echo "Unrecognised Docker push strategy: $VSHD_STRAT"
  fi
}

######## End of helper functions for setting up Docker images for viash ########
# initialise variables
VIASH_DOCKER_SETUP_STRATEGY='alwayscachedbuild'
VIASH_DOCKER_PUSH_STRATEGY='pushifnotpresent'
# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "-v \"$mount_source:$mount_target\""
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=''

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            ViashSetup
            shift 1
            ;;
        ---force_setup)
            VIASH_EXEC_MODE="force_setup"
            ViashSetup
            shift 1
            ;;
        ---push)
            VIASH_EXEC_MODE="push"
            shift 1
            ;;

        ---dss|---docker_setup_strategy)
            VIASH_EXEC_MODE="setup"
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 2
            ;;
        ---docker_setup_strategy=*)
            VIASH_EXEC_MODE="setup"
            VIASH_DOCKER_SETUP_STRATEGY=$(ViashRemoveFlags "$2")
            shift 1
            ;;
        ---dps|---docker_push_strategy)
            VIASH_EXEC_MODE="push"
            VIASH_DOCKER_PUSH_STRATEGY="$2"
            shift 2
            ;;
        ---docker_push_strategy=*)
            VIASH_EXEC_MODE="push"
            VIASH_DOCKER_PUSH_STRATEGY=$(ViashRemoveFlags "$2")
            shift 1
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
            shift 1
            ;;
        ---debug)
            echo "+ docker run --entrypoint=bash -i --rm --privileged -v "$(pwd)":/pwd --workdir /pwd -t build_rmd:0.0.1"
            docker run --entrypoint=bash -i --rm --privileged -v "$(pwd)":/pwd --workdir /pwd -t build_rmd:0.0.1
            exit 0
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "push" ]; then
  ViashPush
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS

if [[ $# -gt 0 ]]; then
  VIASH_PAR_VIASH_DOCS="$1"
  shift 1
fi

if [ -z "$VIASH_PAR_VIASH_DOCS" ]; then
  VIASH_PAR_VIASH_DOCS="."
fi


# detect volumes from file arguments
if [ ! -z "$VIASH_PAR_VIASH_DOCS" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_VIASH_DOCS")"
  VIASH_PAR_VIASH_DOCS=$(ViashAutodetectMount "$VIASH_PAR_VIASH_DOCS")
fi

# Always mount the resource directory
VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")

# Always mount the VIASH_TEMP directory
VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")

# change file ownership
function viash_perform_chown {
  :
}
trap viash_perform_chown EXIT


cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm --privileged $VIASH_EXTRA_MOUNTS build_rmd:0.0.1
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-build_rmd-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par <- list(
  "viash_docs" = $( if [ ! -z ${VIASH_PAR_VIASH_DOCS+x} ]; then echo "'$VIASH_PAR_VIASH_DOCS'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

setwd(par\$viash_docs)

# start docker daemon
system("dockerd", ignore.stdout = TRUE, ignore.stderr = TRUE, wait = FALSE)

# Rmd files under the root directory
rmds <- c(
  list.files(".", '[.]Rmd\$', recursive = TRUE, full.names = TRUE)
)

# remove rmds under examples dir
rmds <- rmds[!grepl("^\\\\./examples|^\\\\./_site", rmds)]

# get corresponding mds
mds <- blogdown:::with_ext(rmds, '.md')


for (i in seq_along(rmds)) {
  rmd <- rmds[[i]]
  md <- mds[[i]]

  # if output is not older than input, skip the compilation
  if (blogdown:::require_rebuild(md, rmd)) {
    message('* knitting ', rmd)

    rmarkdown::render(
      input = rmd,
      output_format = rmarkdown::md_document(
        variant = "gfm",
        preserve_yaml = TRUE
      )
    )
  }
}

message('DONE!')
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
